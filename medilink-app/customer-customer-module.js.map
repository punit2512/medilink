{"version":3,"sources":["webpack:///./src/app/core/auth.guards.ts","webpack:///./src/app/customer/customer-routing.module.ts","webpack:///./src/app/customer/customer.module.ts","webpack:///./src/app/customer/home/home.component.css","webpack:///./src/app/customer/home/home.component.html","webpack:///./src/app/customer/home/home.component.ts","webpack:///./src/app/customer/login/login.component.css","webpack:///./src/app/customer/login/login.component.html","webpack:///./src/app/customer/login/login.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAA2C;AACwD;AACxD;AAG3C;IACI,mBACY,MAAc,EACd,qBAAkC;QADlC,WAAM,GAAN,MAAM,CAAQ;QACd,0BAAqB,GAArB,qBAAqB,CAAa;IAC1C,CAAC;IAEL,+BAAW,GAAX,UAAY,KAA6B,EAAE,KAA0B;QACjE,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,cAAc,EAAE,CAAC,CAAC;QAE5E,IAAI,WAAW,EAAE;YACb,uCAAuC;YACvC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;gBACvE,+CAA+C;gBAC/C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC5B,OAAO,KAAK,CAAC;aAChB;YAED,2CAA2C;YAC3C,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;gBACpF,+CAA+C;gBAC/C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC5B,OAAO,KAAK,CAAC;aAChB;YAED,4BAA4B;YAC5B,OAAO,IAAI,CAAC;SACf;QAED,8DAA8D;QAC9D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,CAAC,EAAE,EAAE,WAAW,EAAE,EAAE,SAAS,EAAE,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACpF,OAAO,KAAK,CAAC;IAEjB,CAAC;IAhCQ,SAAS;QADrB,gEAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;+EAGX,sDAAM;YACS,qDAAW;OAHrC,SAAS,CAiCrB;IAAD,gBAAC;CAAA;AAjCqB;;;;;;;;;;;;;;;;;;;;;;ACLmB;AACc;AACP;AAE+B;AACI;AAEnF,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,kEAAqB;QAChC,WAAW,EAAE,CAAC,2DAAS,CAAC;QACxB,IAAI,EAAE;YACJ,SAAS,EAAE,SAAS;SACrB;KACF;IACD;QACE,IAAI,EAAE,OAAO;QACb,SAAS,EAAE,qEAAsB;KAClC;CACF,CAAC;AAMF;IAAA;IAAqC,CAAC;IAAzB,qBAAqB;QAJjC,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,qBAAqB,CAAI;IAAD,4BAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;AC1BO;AACM;AAC0C;AACI;AACpC;AACS;AACA;AAmBlE;IAAA;IAA8B,CAAC;IAAlB,cAAc;QAjB1B,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2EAAqB;gBACrB,8EAAsB;aACvB;YACD,OAAO,EAAE;gBACP,4DAAY;gBACZ,oEAAc;gBACd,0DAAW;gBACX,kEAAmB;gBACnB,8EAAqB;aACtB;YACD,OAAO,EAAE;gBACP,4DAAY;aACb;SACF,CAAC;OAEW,cAAc,CAAI;IAAD,qBAAC;CAAA;AAAJ;;;;;;;;;;;;ACzB3B,+DAA+D,mJ;;;;;;;;;;;ACA/D,mB;;;;;;;;;;;;;;;;;ACAkD;AAOlD;IAEE;IAAgB,CAAC;IAEjB,gCAAQ,GAAR;IAEA,CAAC;IANU,aAAa;QALzB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,yGAAoC;;SAErC,CAAC;;OACW,aAAa,CAQzB;IAAD,oBAAC;CAAA;AARyB;;;;;;;;;;;;ACP1B,+DAA+D,uJ;;;;;;;;;;;ACA/D,8fAA8f,+CAA+C,keAAke,+CAA+C,ujB;;;;;;;;;;;;;;;;;;;;ACC5gC;AACO;AAEW;AACtB;AAM9C;IACE,wBACU,MAAc,EACd,WAAwB,EACxB,KAAqB,EACrB,WAAwB;QAHxB,WAAM,GAAN,MAAM,CAAQ;QACd,gBAAW,GAAX,WAAW,CAAa;QACxB,UAAK,GAAL,KAAK,CAAgB;QACrB,gBAAW,GAAX,WAAW,CAAa;QAIlC,cAAS,GAAG,KAAK,CAAC;QAElB,gBAAW,GAAG,KAAK,CAAC;IALhB,CAAC;IAOL,iCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACtC,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACnC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/D,CAAC,CAAC;QAEH,yDAAyD;QACzD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,GAAG,CAAC;IAEvE,CAAC;IAGD,sBAAI,6BAAC;QADL,oDAAoD;aACpD,cAAU,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;;;OAAA;IAE3C,iCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,+BAA+B;QAC/B,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;YAC1B,OAAO;SACR;QAED,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5B,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAC1C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACzC,CAAC;IAtCU,cAAc;QAL1B,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,4GAAqC;;SAEtC,CAAC;+EAGkB,sDAAM;YACD,0DAAW;YACjB,8DAAc;YACR,qDAAW;OALvB,cAAc,CAwC1B;IAAD,qBAAC;CAAA;AAxC0B","file":"customer-customer-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthService } from '../_services';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n    constructor(\r\n        private router: Router,\r\n        private authenticationService: AuthService\r\n    ) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n        const currentUser = JSON.parse(this.authenticationService.getCurrentUser());\r\n\r\n        if (currentUser) {\r\n            // check if route is restricted by role\r\n            if (route.data.roles && route.data.roles.indexOf(currentUser.role) === -1) {\r\n                // role not authorised so redirect to home page\r\n                this.router.navigate(['/']);\r\n                return false;\r\n            }\r\n\r\n            // check if rout is restricted by user type\r\n            if (route.data.user_type && route.data.user_type.indexOf(currentUser.user_type) === -1) {\r\n                // role not authorised so redirect to home page\r\n                this.router.navigate(['/']);\r\n                return false;\r\n            }\r\n\r\n            // authorised so return true\r\n            return true;\r\n        }\r\n\r\n        // not logged in so redirect to login page with the return url\r\n        this.router.navigate(['/patient/login'], { queryParams: { returnUrl: state.url } });\r\n        return false;\r\n\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AuthGuard } from '../core/auth.guards';\r\n\r\nimport { HomeComponent as CustomerHomeComponent } from './home/home.component';\r\nimport { LoginComponent as CustomerLoginComponent } from './login/login.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CustomerHomeComponent,\r\n    canActivate: [AuthGuard],\r\n    data: {\r\n      user_type: \"patient\"\r\n    }\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: CustomerLoginComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CustomerRoutingModule { }","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HomeComponent as CustomerHomeComponent } from '../customer/home/home.component';\r\nimport { LoginComponent as CustomerLoginComponent } from '../customer/login/login.component';\r\nimport { MaterialModule } from '../core/material.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CustomerRoutingModule } from './customer-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CustomerHomeComponent,\r\n    CustomerLoginComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MaterialModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CustomerRoutingModule\r\n  ],\r\n  exports: [\r\n    CommonModule\r\n  ]\r\n})\r\n\r\nexport class CustomerModule { }","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2N1c3RvbWVyL2hvbWUvaG9tZS5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n    \n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2N1c3RvbWVyL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<mat-card class=\\\"example-card\\\">\\r\\n  <mat-card-header>\\r\\n    <mat-card-title>Login</mat-card-title>\\r\\n  </mat-card-header>\\r\\n  <mat-card-content>\\r\\n    <form class=\\\"example-form\\\" [formGroup]=\\\"loginForm\\\">\\r\\n      <table class=\\\"example-full-width\\\" cellspacing=\\\"0\\\">\\r\\n        <tr>\\r\\n          <td>\\r\\n            <mat-form-field class=\\\"example-full-width\\\">\\r\\n              <input matInput placeholder=\\\"Username\\\" formControlName=\\\"username\\\"\\r\\n                [ngClass]=\\\"{ 'is-invalid': submitted && f.username.errors }\\\">\\r\\n            </mat-form-field>\\r\\n            <div *ngIf=\\\"submitted && f.username.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"f.username.errors.required\\\">Username is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>\\r\\n            <mat-form-field class=\\\"example-full-width\\\">\\r\\n              <input matInput placeholder=\\\"Password\\\" formControlName=\\\"password\\\"\\r\\n              [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\">\\r\\n            </mat-form-field>\\r\\n            <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </table>\\r\\n    </form>\\r\\n    <mat-spinner [style.display]=\\\"showSpinner ? 'block' : 'none'\\\"></mat-spinner>\\r\\n  </mat-card-content>\\r\\n  <mat-card-actions>\\r\\n    <button mat-raised-button (click)=\\\"onSubmit()\\\" color=\\\"primary\\\">Login</button>\\r\\n  </mat-card-actions>\\r\\n</mat-card>\"","\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { MatDialog } from '@angular/material';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../../_services';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  constructor(\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private authService: AuthService\n  ) { }\n\n  loginForm: FormGroup;\n  submitted = false;\n  returnUrl: string;\n  showSpinner = false;\n    \n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n\n    // get return url from route parameters or default to '/'\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    \n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.loginForm.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    console.log(this.returnUrl);\n    localStorage.setItem('user_data', \"test\");\n    this.router.navigate([this.returnUrl]);\n  }\n\n}"],"sourceRoot":""}